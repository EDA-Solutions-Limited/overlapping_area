/*******************************************************************************
 * Macro Name: overlapping_area
 *This script calculates the overlapping area of 2 layers
 * Revision History:
 * 1 June 2021	Generated by L-Edit
 *******************************************************************************/
#include <cstdlib>
#include <cstdarg>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <cmath>

#include <vector>
#include <string>

#define EXCLUDE_LEDIT_LEGACY_UPI

#include <ldata.h>
/* Begin -- Uncomment this block if you are using L-Comp. */
//#include <lcomp.h>
/* End */

extern "C"
{
    void overlapping_area(void);
    int UPI_Entry_Point(void);
}

void overlapping_area(void)
{
    LCell pCell = LCell_GetVisible();
    LFile pTDBFile = LCell_GetFile(pCell);
    double overlapArea = 0;
    char *layer_name = "Metal1:drawing";
    LLayer pM1Layer = LLayer_Find(pTDBFile, layer_name); //change layer name to desired layer
    if (pM1Layer == NULL)
    {
        LDialog_MsgBox(LFormat("Unable to find layer %s \n", layer_name));
        return;
    }
    std::vector<LObject> paObjectsA;
    std::vector<LObject> paObjectsB;
    for (LSelection pSelection = LSelection_GetList(); Assigned(pSelection); pSelection = LSelection_GetNext(pSelection)){
		paObjectsB.push_back(LSelection_GetObject(pSelection));
	}
    if (paObjectsB.size() > 1){
        LLayer_New( pTDBFile, pM1Layer, "booleanAND");
        LLayer pboolLayer =  LLayer_Find(pTDBFile, "booleanAND");
        paObjectsA.push_back(paObjectsB[0]);
        paObjectsB.erase(paObjectsB.begin());

        LCell_BooleanOperation(pCell, LBoolOp_AND, 0, &paObjectsA[0], paObjectsA.size(), &paObjectsB[0], paObjectsB.size(), pboolLayer,LFALSE);
        for (LObject pObject = LObject_GetList(pCell, pboolLayer ); Assigned(pObject); pObject = LObject_GetNext(pObject)){
		     overlapArea +=  LObject_Area(pObject)/1000000;
	    }
        LDialog_MsgBox(LFormat("Overlapping Area %f microns ^2 \n", overlapArea));
        LObject_Delete(pCell, LObject_GetList(pCell, pboolLayer));
        LLayer_Delete(pTDBFile,pboolLayer);
    }
    else{
		LDialog_MsgBox("No selection made or selection has 1 object \nPlease make a selection and run macro again  \n");
	}
    
}

int UPI_Entry_Point(void)
{
    LMacro_BindToMenuAndHotKey_v9_30("Tools", NULL /*hotkey*/,
                                     "overlapping_area", "overlapping_area", NULL /*hotkey category*/);
    return 1;
}
